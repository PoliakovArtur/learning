package lesson_3_oop.tasks.task4;

/*
    * Задание со звездочкой.
    Реализовать структуру данных связанный список.
    Связанный список представляет собой коллекцию из значений, обернутых в объекты, имеющие ссылки друг на друга.
    Сам список хранит ссылку на первый объект и последний, а также на размер коллекции.
    Элементы могут добавляться в начало, в конец и в середину.
    При добавлении элемента в конец создается новый объект Node, в который заворачивается значение,
    затем у последнего текущего Node в качестве next присваивается этот объект, затем в самом списке
    значение последнего элемента меняется на новый созданный объект.
    Добавление в начало аналогично добавлению в конец.
    При добавлении в середину по индексу находится элемент, после которого должен идти вставляемый элемент, и элемент,
    перед которым будет вставляемый, и у них меняются ссылки next и prev на вставляемый, а у вставляемого устанавливается
    next и prev на эти элементы.
    Удаление представляет собой обратный процесс - просто меняются ссылки.
    Такая коллекция решает проблему массива с ограниченностью размера, но время получения элемента по индексу будет линейным.

    Снаружи тот, кто пользуется списком не должен знать ни про какие Node, он просто передает при вставке значение, а внутри списка оно уже оборачивается в объект.
    Должны быть реализованы следующие методы:
    1. Добавление в конец.
    2. Добавление в начало.
    3. Добавление по индексу. Индексы нумеруются с нуля. добавление по индексу 0 аналогично добавлению в начало. добавление
    по индексу size аналогично добавлению в конец
    4. Получение по индексу.
    5. indexOf - принимает значение. Возвращает индекс первого найденного значение с начала либо -1
    6. lastIndexOf - принимает значение. Возвращает индекс первого найденного значение с конца либо -1
    7. Удаление по индексу.
    8. Получение первого элемента
    9. Получение последнего элемента
    10. Получение размера коллекции
    11. ** iterator() - возвращает объект вложенного класса Iterator, который имеет доступ к полям внешнего класса.
    Данный объект умеет обходить список, имеет метод hasNext(),next(), hasPrevious(), previous().
    Выглядит обход примерно так:
    LinkedList.Iterator iterator = list.iterator();
    while(iterator.hasNext()) {
        System.out.println(iterator.next());
    }
    Т.к. получение по индексу линейно, то получать поочередно элементы затратно, а
    итератор хранит указатель на текущий элемент, т.е он умеет "гулять" по списку.
    12. ** реализовать у итератора метод remove(). Данный метод позволяет удалить предыдущий полученный элемент, с помощью
    next() или previous()
    13. ** реализовать метод sort() который сортирует список. В качестве алгоритма сортировки использовать сортировку пузырьком
    14. ** addAll(LinkedList list, int index) - добавляет несколько элементов по индексу.
    15. ** removeAll(LinkedList list) - удаляет все элементы, которые находятся в переданном списке
    16. ** retainAll(LinkedList list) - удаляет все элементы, которых нет в переданном списке
 */

public class LinkedList {

    private Node head;
    private Node tail;
    private int size;

    private static class Node {
        Node prev;
        Node next;
        int val;
    }
}
